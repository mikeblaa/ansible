---
- include_vars: main.yml

# Set the workstation hostname, comment out if testing on Boxes
- name: set hostname
  hostname:
    name: '{{ workstation_hostname }}'
    use: systemd

# Set local DNS server and search domain using systemd-resolved
- name: create /etc/systemd/resolved.conf.d/ directory if it does not exist
  ansible.builtin.file:
    path: /etc/systemd/resolved.conf.d/
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: create resolved.conf with content and restart systemd-resolved
  ansible.builtin.copy:
    content: |
      [Resolve]
      DNS={{ workstation_dns }}
      Domains={{ workstation_domain }}
    dest: /etc/systemd/resolved.conf.d/resolved.conf
    owner: root
    group: root
    mode: '0644'
  notify: restart systemd-resolved

# Enable third-party repositories
- name: enable third-party repositories
  dnf:
    name: fedora-workstation-repositories
    state: latest

- name: enable third-party repositories
  lineinfile: 
    path: "{{ item }}"
    create: false # so raise error if not already installed
    regexp: enabled=
    line: enabled=1
    firstmatch: yes
  with_items:
    - /etc/yum.repos.d/google-chrome.repo
    - /etc/yum.repos.d/rpmfusion-nonfree-nvidia-driver.repo
    - /etc/yum.repos.d/rpmfusion-nonfree-steam.repo

# Update and install packages
- name: update packages
  dnf:
    name: '*'
    state: latest

- name: install nVidia drivers
  dnf:
    name:
      - akmod-nvidia
    state: present

- name: install dnf packages
  dnf:
    name:
      - brasero
      - cifs-utils
      - drawing
      - easytag
      - gnucash
      - google-chrome-stable
      - gparted
      - keepassxc
      - libdbi-dbd-sqlite
      - nfs-utils
      - python3-libsemanage
      - python3-pip
      - simple-scan
      - snapd
      - steam
      - vim
    state: latest

- name: install pip packages
  pip:
    name:
      - yfinance

# Add Visual Studio Yum Repository
- name: Add repository
  ansible.builtin.yum_repository:
    name: Visual Studio Code
    description: Visual Studio Code
    baseurl: https://packages.microsoft.com/yumrepos/vscode
    gpgkey: https://packages.microsoft.com/keys/microsoft.asc

# Install Visual Studio Code
- name: install Visual Studio Code
  dnf:
    name: code
    state: present

# Install Slack using flatpak
- name: install Slack flatpak
  community.general.flatpak:
    name:  com.slack.Slack

# Install Discord using flatpak
- name: install Discord flatpak
  community.general.flatpak:
    name:  com.discordapp.Discord

- name: add existing user mike to group libvirt
  user:
    name: mike
    groups: libvirt
    append: yes

# Create a directory for Gnome Boxes and Podman since they don't like 
# working out of an NFS mounted home directory
- name: create /opt/containers directory if it does not exist
  ansible.builtin.file:
    path: /opt/containers
    state: directory
    mode: '0777'

- name: create /opt/gnome-boxes directory if it does not exist
  ansible.builtin.file:
    path: /opt/gnome-boxes
    state: directory
    mode: '0777'

# Miscellaneous OS settings
- name: set selinux cups_execmem 
  seboolean:
    name: cups_execmem
    state: yes
    persistent: yes

- name: set selinux use_nfs_home_dirs
  seboolean:
    name: use_nfs_home_dirs
    state: yes
    persistent: yes

- name: set selinux virt_use_nfs
  seboolean:
    name: virt_use_nfs
    state: yes
    persistent: yes

- name: enabled networkmanager-wait-online.service
  systemd:
    name: NetworkManager-wait-online.service 
    enabled: yes

- name: start SSSD after network-online
  lineinfile:
    path: /lib/systemd/system/sssd.service
    line: 'After=network-online.target'
    insertbefore: Before=.*

# Set up network filesystem automounts
- name: systemd automount files
  template: 
    src: "{{ item }}" 
    dest: /etc/systemd/system/{{ item | basename | regex_replace('\.j2','') }}
    owner: root
    group: root
    mode: '0644'
  with_fileglob:
      - templates/mnt-*.j2

- name: start mnt-mike automount
  systemd:
    name: mnt-mike.mount
    enabled: yes
    state: started

- name: start mnt-share automount
  systemd:
    name: mnt-share.mount
    enabled: yes
    state: started

# Enable sshd
- name: enable sshd
  systemd:
    name: sshd
    enabled: yes
    state: started
...
