---
- include_vars: main.yml

# Set the workstation hostname, comment out if testing on Boxes
- name: set hostname
  hostname:
    name: '{{ workstation_hostname }}'
    use: systemd

- name: set local DNS server and search domain using systemd-resolved
  lineinfile:
    path: /etc/systemd/resolved.conf
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backup: yes
  with_items:
    - { regexp: '^#?DNS=.*', line: 'DNS={{ workstation_dns }}' }
    - { regexp: '^#?Domains=.*', line: 'Domains={{ workstation_domain }}' }
  notify: restart systemd-resolved

- name: enable third-party repositories
  dnf:
    name: fedora-workstation-repositories
    state: latest

- name: enable third-party repositories
  lineinfile: 
    path: "{{ item }}"
    create: false # so raise error if not already installed
    regexp: enabled=
    line: enabled=1
    firstmatch: yes
  with_items:
    - /etc/yum.repos.d/google-chrome.repo
    - /etc/yum.repos.d/rpmfusion-nonfree-nvidia-driver.repo
    - /etc/yum.repos.d/rpmfusion-nonfree-steam.repo

- name: update packages
  dnf:
    name: '*'
    state: latest

- name: install nVidia drivers
  dnf:
    name:
      - akmod-nvidia
    state: present

- name: install dnf packages
  dnf:
    name:
      - brasero
      - cifs-utils
      - easytag
      - gnucash
      - google-chrome-stable
      - gparted
      - keepass
      - libdbi-dbd-sqlite
      - nfs-utils
      - perl-LWP-Protocol-https # Needed by GnuCash after FC33
      - python3-libsemanage
      - python3-pip
      - simple-scan
      - snapd
      - steam
      - vim
    state: latest

- name: install pip packages
  pip:
    name:
      - piecash
      - yfinance
      - alpha_vantage

# Enable classic snap support for Visual Studio Code snap
- name: enable classic snap support for Visual Studio Code snap
  file:
    src: /var/lib/snapd/snap
    dest: /snap
    owner: root
    group: root
    state: link

# Install Visual Studio Code using snap with classic confinement
- name: install Visual Studio Code snap with option --classic
  snap:
    name: code
    classic: yes

# Install Slack using snap with classic confinement
- name: install Slack using snap with option --classic
  snap:
    name: slack
    classic: yes

# Install Discord using snap with classic confinement
- name: install Discord using snap with option --classic
  snap:
    name: discord

- name: add existing user mike to group libvirt
  user:
    name: mike
    groups: libvirt
    append: yes

# Miscellaneous OS settings
- name: set selinux cups_execmem 
  seboolean:
    name: cups_execmem
    state: yes
    persistent: yes

- name: set selinux use_nfs_home_dirs
  seboolean:
    name: use_nfs_home_dirs
    state: yes
    persistent: yes

- name: set selinux virt_use_nfs
  seboolean:
    name: virt_use_nfs
    state: yes
    persistent: yes

- name: enabled networkmanager-wait-online.service
  systemd:
    name: NetworkManager-wait-online.service 
    enabled: yes

- name: start SSSD after network-online
  lineinfile:
    path: /lib/systemd/system/sssd.service
    line: 'After=network-online.target'
    insertbefore: Before=.*

# Set up network filesystem automounts
- name: systemd automount files
  template: 
    src: "{{ item }}" 
    dest: /etc/systemd/system/{{ item | basename | regex_replace('\.j2','') }}
    owner: root
    group: root
    mode: '0644'
  with_fileglob:
      - templates/mnt-*.j2

- name: start mnt-mike automount
  systemd:
    name: mnt-mike.mount
    enabled: yes
    state: started

- name: start mnt-share automount
  systemd:
    name: mnt-share.mount
    enabled: yes
    state: started

# Enable sshd
- name: enable sshd
  systemd:
    name: sshd
    enabled: yes
    state: started
...
